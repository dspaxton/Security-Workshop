AWSTemplateFormatVersion: "2010-09-09"

Description: This CloudFormation Template can be used to quickly get started with AWS GuardDuty by configuring an environment to generate and remediate AWS GuardDuty findings.

Parameters:
  ResourceName:
    Type: String
    Default: Security-Workshop
    AllowedValues:
      - Security-Workshop
    Description: Prefix for the resources that are created.

  # KeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   ConstraintDescription: This must be the name of an existing EC2 KeyPair.
  #   Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instances created in this scenario.'

  EmailAddress:
    Description: Email address for receiving alerts.
    Type: String
    AllowedPattern: ".+"

  AMZNLinux2Image:
    Description: The latest Amazon Linux 2 Image
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'    

Metadata: {}

Mappings:
  RegionMap:
    us-east-1:
      "64": "ami-afd15ed0"
    us-east-2:
      "64": "ami-2a0f324f"
    us-west-1:
      "64": "ami-00d8c660"
    us-west-2:
      "64": "ami-31394949"
    ap-south-1:
      "64": "ami-7d95b612"
    ap-northeast-1:
      "64": "ami-2724cf58"
    ap-northeast-2:
      "64": "ami-d117bebf"
    ap-southeast-1:
      "64": "ami-a7f0c4db"
    ap-southeast-2:
      "64": "ami-c267b0a0"
    ca-central-1:
      "64": "ami-c59818a1"
    eu-central-1:
      "64": "ami-43eec3a8"
    eu-west-1:
      "64": "ami-921423eb"
    eu-west-2:
      "64": "ami-924aa8f5"
    eu-west-3:
      "64": "ami-a88233d5"
    sa-east-1:
      "64": "ami-4fd48923"

Conditions: {}

Resources:
  # GuardDuty Bucket
  GDThreatListBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName:
        Fn::Join:
          - "-"
          - ["guardduty-example", !Ref "AWS::AccountId", !Ref "AWS::Region"]

  # VPC & EC2 Creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId: !Ref VPC
  RouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Ref ResourceName
      VpcId: !Ref VPC
  SubnetAssoc:
    DependsOn:
      - Subnet
      - RouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref ResourceName
        - Key: Network
          Value: Public
  InboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: 0
        To: 65535
  OutboundPublicNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 0
        To: 65535
  SubnetNACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref PublicNACL
  TargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ResourceName
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: 0.0.0.0/0
  ForensicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Forensics"]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: 10.0.0.0/24
      SecurityGroupEgress:
        - IpProtocol: icmp
          FromPort: "-1"
          ToPort: "-1"
          CidrIp: 10.0.0.0/24

  AdminSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH Server security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '22'
          ToPort: '22'
      Tags:
        - Key: Name
          Value: SSH_Server_SecurityGroup

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref ResourceName
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 10.0.0.0/24
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 10.0.0.0/24
  # Malicious IAM User
  CompromisedUser:
    Type: "AWS::IAM::User"
    Properties:
      UserName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Compromised", "Simulated"]

  CompromisedUserKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: !Ref CompromisedUser

  CompromisedUserPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "CompromisedUserPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
              - ssm:DescribeParameters
            Resource:
              Fn::Join:
                - ":"
                - [
                    "arn:aws:ssm",
                    !Ref "AWS::Region",
                    !Ref "AWS::AccountId",
                    "*",
                  ]
      Users:
        - !Ref CompromisedUser

  # Malicious Instance - For GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom
  MaliciousIP:
    DependsOn:
      - GatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref MaliciousInstance
      Domain: vpc

  MaliciousInstance:
    DependsOn:
      - GDThreatListBucket
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - "64"
      #KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          GroupSet:
            - !Ref TargetSecurityGroup
          SubnetId:
            Ref: Subnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ": "
              - [!Ref ResourceName, "Malicious Instance", "Scenario 1 & 2"]
        - Key: GD-Finding
          Value: "UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -ex

            # Create Creds and Config files
            mkdir /home/ec2-user/.aws
            touch /home/ec2-user/.aws/credentials
            touch /home/ec2-user/.aws/config

            cat <<EOT >> /home/ec2-user/.aws/credentials
            [default]
            aws_access_key_id = ${AccessKey}
            aws_secret_access_key = ${SecretKey}
            EOT

            # Modify Permissions and Ownership
            chmod 746 /home/ec2-user/.aws/credentials
            chown ec2-user /home/ec2-user/.aws/credentials
            chmod 746 /home/ec2-user/.aws/config
            chown ec2-user /home/ec2-user/.aws/config

            cat <<EOT >> /home/ec2-user/gd-findings.sh
            #!/bin/bash
            aws configure set default.region ${Region}
            aws iam get-user
            aws iam create-user --user-name Sarah
            aws dynamodb list-tables
            aws s3api list-buckets
            aws ssm describe-parameters
            aws ssm get-parameters --names "gd_prod_dbpwd_sample"
            EOT

            chmod 744 /home/ec2-user/gd-findings.sh
            chown ec2-user /home/ec2-user/gd-findings.sh

            echo "* * * * * /home/ec2-user/gd-findings.sh > /home/ec2-user/gd-findings.log 2>&1" | tee -a /var/spool/cron/ec2-user

          - Region: !Ref "AWS::Region"
            AccessKey: !Ref CompromisedUserKey
            SecretKey:
              Fn::GetAtt:
                - "CompromisedUserKey"
                - "SecretAccessKey"

  # Compromised Instance - For GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom
  CompromisedInstance:
    Type: AWS::EC2::Instance
    DependsOn: MaliciousIP
    Properties:
      InstanceType: t3.micro
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref AWS::Region
          - "64"
      #KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref TargetSecurityGroup
          SubnetId:
            Ref: Subnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ": "
              - [!Ref ResourceName, "Compromised Instance", "Scenario 1"]
        - Key: GD-Finding
          Value: "UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          echo BEGIN
          echo "* * * * * ping -c 6 -i 10 ${MaliciousIP}" | tee -a /var/spool/cron/ec2-user

  # Compromised Instance IAM Role - For GuardDuty Finding: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration
  CompromisedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "EC2", "Compromised"]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
        - PolicyName: GuardDutyCompromisedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ssm:DescribeParameters
                  - ssm:GetParameters
                  - ssm:DeleteParameter
                Resource:
                  Fn::Join:
                    - ":"
                    - [
                        "arn:aws:ssm",
                        !Ref "AWS::Region",
                        !Ref "AWS::AccountId",
                        "parameter/*",
                      ]
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  Fn::GetAtt:
                    - "CustDynamoDBTable"
                    - "Arn"
              - Effect: Allow
                Action:
                  - dynamodb:ListTables
                  - dynamodb:DescribeTable
                Resource: "*"
              - Effect: Allow
                Action:
                  - guardduty:GetDetector
                  - guardduty:ListDetectors
                  - guardduty:CreateThreatIntelSet
                  - guardduty:UpdateThreatIntelSet
                Resource: "*"
              - Effect: Allow
                Action: "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${GDThreatListBucket}/*"
              - Effect: Allow
                Action:
                  - iam:PutRolePolicy
                Resource:
                  Fn::Join:
                    - ":"
                    - [
                        "arn:aws:iam:",
                        !Ref "AWS::AccountId",
                        "role/aws-service-role/guardduty.amazonaws.com/*",
                      ]

  CompromisedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Compromised", "Profile"]
      Path: /
      Roles:
        - !Ref CompromisedRole

  # IAM Credential Parameter Placeholders
  DBPWDParameter:
    Type: "AWS::SSM::Parameter"
    Properties:
      Name: "gd_prod_dbpwd_sample"
      Type: "StringList"
      Value: "NA"
      Description: "Sample secret for generating GuardDuty findings."

  # Compromised Instance - For GuardDuty Finding: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration
  CompromisedInstance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      IamInstanceProfile: !Ref CompromisedInstanceProfile
      #KeyName: !Ref KeyName
      ImageId:
        Fn::FindInMap:
          - RegionMap
          - !Ref "AWS::Region"
          - "64"
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref TargetSecurityGroup
          SubnetId:
            Ref: Subnet
      Tags:
        - Key: Name
          Value:
            Fn::Join:
              - ": "
              - [!Ref ResourceName, "Compromised Instance", "Scenario 3"]
        - Key: GD-Finding
          Value: "UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration"
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash

            # Start SSM Agent
            sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm

            # Set Variables
            aws configure set default.region ${Region}
            uuid=$(uuidgen)
            list="gd-threat-list-example-$uuid.txt"
            maliciousip=`curl http://169.254.169.254/latest/meta-data/public-ipv4`

            # Create Threatlist
            echo ${IP} >> $list

            # Upload list to S3
            aws s3 cp $list s3://${Bucket}/$list
            sleep 5

            # Create GuardDuty Threat List
            id=`aws guardduty list-detectors --query 'DetectorIds[0]' --output text`
            aws guardduty create-threat-intel-set --activate --detector-id $id --format TXT --location https://s3.amazonaws.com/${Bucket}/$list --name Example-Threat-List

            # Set Parameters in SSM
            aws ssm put-parameter --name 'gd_prod_dbpwd_sample' --type "SecureString" --value 'Password123' --overwrite

            # Add Item to Customer DB
            aws dynamodb put-item --table-name ${DB} --item '{ "name": { "S": "Joshua Tree" }, "state": {"S": "California"}, "website":{"S": "https://www.nps.gov/jotr/index.htm"} }'

          - Profile: !Ref CompromisedInstanceProfile
            Region: !Ref "AWS::Region"
            DB: !Ref CustDynamoDBTable
            Bucket: !Ref GDThreatListBucket
            IP: !Ref MaliciousIP

  # Mock Customer Database
  CustDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "name"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "name"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "GuardDuty-Example-Customer-DB"

  # Remediation Lambda Role - Instance Credential Exfiltration (ICE)
  RemediationLambdaICERole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Lambda", "InstanceCredentialExfiltration"]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName:
            Fn::Join:
              - "-"
              - [!Ref ResourceName, "InstanceCredentialExfiltration"]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:DescribeParameters
                Resource: "*"
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:ReplaceIamInstanceProfileAssociation
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:DescribeIamInstanceProfileAssociations
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:CreateInstanceProfile
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:AddRoleToInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                  - iam:ListInstanceProfilesForRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:DeleteInstanceProfile
                Resource:
                  Fn::GetAtt:
                    - "CompromisedInstanceProfile"
                    - "Arn"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  Fn::GetAtt:
                    - "CompromisedRole"
                    - "Arn"
              - Effect: Allow
                Action:
                  - iam:PutRolePolicy
                Resource:
                  Fn::GetAtt:
                    - "CompromisedRole"
                    - "Arn"
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref GuardDutySNSTopic
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  # Remediation Lambda - Instance Credential Exfiltration (ICE)
  RemediationLambdaICE:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Remediation", "InstanceCredentialExfiltration"]
      Handler: "index.handler"
      Environment:
        Variables:
          TOPIC_ARN: !Ref GuardDutySNSTopic
      Role:
        Fn::GetAtt:
          - "RemediationLambdaICERole"
          - "Arn"
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import json
          import datetime
          import boto3
          import os

          def handler(event, context):

            # Log out event
            print("log -- Event: %s " % json.dumps(event))

            # Create generic function response
            response = "Error auto-remediating the finding."

            try:

              # Set Clients
              iam = boto3.client('iam')
              ec2 = boto3.client('ec2')

              # Set Role Variable
              role = event['detail']['resource']['accessKeyDetails']['userName']

              # Current Time
              time = datetime.datetime.utcnow().isoformat()

              # Set Revoke Policy
              policy = """
                {
                  "Version": "2012-10-17",
                  "Statement": {
                    "Effect": "Deny",
                    "Action": "*",
                    "Resource": "*",
                    "Condition": {"DateLessThan": {"aws:TokenIssueTime": "%s"}}
                  }
                }
              """ % time

              # Add policy to Role to Revoke all Current Sessions
              iam.put_role_policy(
                RoleName=role,
                PolicyName='RevokeOldSessions',
                PolicyDocument=policy.replace('\n', '').replace(' ', '')
              )

              # Send Response Email
              response = "GuardDuty Remediation | ID:%s: GuardDuty discovered EC2 IAM credentials (Role: %s) being used outside of the EC2 service.  All sessions have been revoked.  Please follow up with any additional remediation actions." % (event['detail']['id'], role)
              sns = boto3.client('sns')
              sns.publish(
                TopicArn=os.environ['TOPIC_ARN'],
                Message=response
              )
            except ClientError as e:
              print(e)

            print("log -- Response: %s " % response)
            return response
      Runtime: "python2.7"
      Timeout: "35"
  RemediationLambdaICEInvokePermissions:
    DependsOn:
      - RemediationLambdaICE
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "RemediationLambdaICE"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  # Remediation Lambda Role - EC2/MaliciousIPCaller
  RemediationLambdaEC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Lambda", "EC2MaliciousIPCaller"]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName:
            Fn::Join:
              - "-"
              - [!Ref ResourceName, "EC2MaliciousIPCaller"]
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:CreateSecurityGroup
                  - ec2:DescribeSecurityGroups
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:UpdateSecurityGroupRuleDescriptionsEgress
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:DescribeInstances
                  - ec2:UpdateSecurityGroupRuleDescriptionsIngress
                  - ec2:DescribeVpcs
                  - ec2:ModifyInstanceAttribute
                  - lambda:InvokeFunction
                  - cloudwatch:PutMetricData
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref GuardDutySNSTopic

  # Remediation Lambda - EC2MaliciousIPCaller
  RemediationLambdaEC2:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName:
        Fn::Join:
          - "-"
          - [!Ref ResourceName, "Remediation", "EC2MaliciousIPCaller"]
      Handler: "index.handler"
      Environment:
        Variables:
          TOPIC_ARN: !Ref GuardDutySNSTopic
          FORENSICS_SG: !Ref ForensicSecurityGroup
          INSTANCE_ID: !Ref CompromisedInstance
      Role:
        Fn::GetAtt:
          - "RemediationLambdaEC2Role"
          - "Arn"
      Code:
        ZipFile: |
          from __future__ import print_function
          from botocore.exceptions import ClientError
          import boto3
          import json
          import os

          def handler(event, context):

            # Log out event
            print("log -- Event: %s " % json.dumps(event))

            # Create generic function response
            response = "Error auto-remediating the finding."

            try:
              ec2 = boto3.client('ec2')

              # Set Variables
              instanceID = event["detail"]["resource"]["instanceDetails"]["instanceId"]
              security_group_id = os.environ['FORENSICS_SG']

              if instanceID == os.environ['INSTANCE_ID']:

                print("log -- Security Group Created %s." % security_group_id)

                # Isolate Instance
                ec2 = boto3.resource('ec2')
                instance = ec2.Instance(instanceID)
                print("log -- %s, %s" % (instance.id, instance.instance_type))
                instance.modify_attribute(Groups=[security_group_id])

                # Send Response Email
                response = "GuardDuty Remediation | ID:%s: GuardDuty discovered an EC2 instance (Instance ID: %s) that is communicating outbound with an IP Address on a threat list that you uploaded.  All security groups have been removed and it has been isolated. Please follow up with any additional remediation actions." % (event['detail']['id'], event['detail']['resource']['instanceDetails']['instanceId'])
                sns = boto3.client('sns')
                sns.publish(
                  TopicArn=os.environ['TOPIC_ARN'],
                  Message=response
                )
                print("log -- Response: %s " % response)
              else:
                print("log -- Instance unrelated to GuardDuty-Hands-On environment.")

            except ClientError as e:
              print(e)

            print("log -- Response: %s " % response)
            return response
      Runtime: "python2.7"
      Timeout: "35"
  RemediationLambdaEC2InvokePermissions:
    DependsOn:
      - RemediationLambdaEC2
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Ref "RemediationLambdaEC2"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  # Findings SNS Topic
  GuardDutySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref ResourceName
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
  GuardDutySNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ID-GD-Topic-Policy
        Version: "2012-10-17"
        Statement:
          - Sid: SID-GD-Example
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref GuardDutySNSTopic
      Topics:
        - !Ref GuardDutySNSTopic

  # GuardDuty CloudWatch Event - For GuardDuty Finding: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom
  GuardDutyEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: GuardDuty-Event-EC2-MaliciousIPCaller
      Description: "GuardDuty Event: UnauthorizedAccess:EC2/MaliciousIPCaller.Custom"
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - UnauthorizedAccess:EC2/MaliciousIPCaller.Custom
      State: ENABLED
      Targets:
        - Arn: !GetAtt RemediationLambdaEC2.Arn
          Id: "GuardDutyEvent-Lambda-Trigger"
        - Arn: !Ref GuardDutySNSTopic
          Id: "GuardDutySNSTopic-EC2-ThreatList"
          InputTransformer:
            InputTemplate: '"GuardDuty Finding | ID:<gdid>: The EC2 instance <instanceid> may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty"'
            InputPathsMap:
              instanceid: $.detail.resource.instanceDetails.instanceId
              gdid: "$.detail.id"

  # GuardDuty CloudWatch Event - For GuardDuty Finding: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration
  GuardDutyEventIAM:
    Type: "AWS::Events::Rule"
    Properties:
      Name: GuardDuty-Event-IAMUser-InstanceCredentialExfiltration
      Description: "GuardDuty Event: UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration"
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - "UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration"
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt RemediationLambdaICE.Arn
          Id: "GuardDutyEvent-Lambda-Trigger"
        - Arn:
            Ref: "GuardDutySNSTopic"
          Id: "GuardDutySNSTopic-EC2-IAM"
          InputTransformer:
            InputTemplate: '"GuardDuty Finding | ID:<gdid>: An EC2 instance IAM credentials (Role: <userName>) may be compromised and should be investigated. Go to https://console.aws.amazon.com/guardduty"'
            InputPathsMap:
              userName: "$.detail.resource.accessKeyDetails.userName"
              gdid: "$.detail.id"

  # GuardDuty CloudWatch Event - For GuardDuty Finding: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom
  GuardDutyEventIAM2:
    Type: "AWS::Events::Rule"
    Properties:
      Name: GuardDuty-Event-IAMUser-MaliciousIPCaller
      Description: "GuardDuty Event: UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom"
      EventPattern:
        source:
          - aws.guardduty
        detail:
          type:
            - "UnauthorizedAccess:IAMUser/MaliciousIPCaller.Custom"
      State: "ENABLED"
      Targets:
        - Arn:
            Ref: "GuardDutySNSTopic"
          Id: "GuardDutySNSTopic-IAM-ThreatList"
          InputTransformer:
            InputTemplate: '"GuardDuty Finding | ID:<gdid>: An AWS API operation was invoked (userName: <userName>) from an IP address that is included on your threat list and should be investigated. Go to https://console.aws.amazon.com/guardduty"'
            InputPathsMap:
              userName: "$.detail.resource.accessKeyDetails.userName"
              gdid: "$.detail.id"




  CloudwatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - 
          PolicyName: "SSMParamRetrieval"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: ssm:GetParameter
                Resource: "*"
  CloudInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "CloudwatchRole"


  CloudWatchAgentConfig:
    Type: "AWS::SSM::Parameter"
    Properties:
      Description: "JSON Describing how to configure Cloudwatch Logs Agent"
      Name: "SecurityDemoConfig"
      Type: "String"
      Value:  '{"logs":{"logs_collected":{"files":{"collect_list":[{"file_path":"/var/log/messages","log_group_name":"/securitydemo/messages","log_stream_name":"{instance_id}"},{"file_path":"/var/log/secure","log_group_name":"/securitydemo/secure","log_stream_name":"{instance_id}"},{"file_path":"/var/log/amazon/amazon-cloudwatch-agent/amazon-cloudwatch-agent.log","log_group_name":"/securitydemo/amazon-cloudwatch-agent.log","log_stream_name":"{instance_id}"},{"file_path":"/var/log/httpd/access_log","log_group_name":"/securitydemo/httpd/access","log_stream_name":"{instance_id}"},{"file_path":"/var/log/httpd/error_log","log_group_name":"/securitydemo/httpd/error","log_stream_name":"{instance_id}"}]}}},"metrics":{"append_dimensions":{"AutoScalingGroupName":"${aws:AutoScalingGroupName}","ImageId":"${aws:ImageId}","InstanceId":"${aws:InstanceId}","InstanceType":"${aws:InstanceType}"},"metrics_collected":{"cpu":{"measurement":["cpu_usage_idle","cpu_usage_iowait","cpu_usage_user","cpu_usage_system"],"metrics_collection_interval":60,"resources":["*"],"totalcpu":false},"disk":{"measurement":["used_percent","inodes_free"],"metrics_collection_interval":60,"resources":["*"]},"diskio":{"measurement":["io_time","write_bytes","read_bytes","writes","reads"],"metrics_collection_interval":60,"resources":["*"]},"mem":{"measurement":["mem_used_percent"],"metrics_collection_interval":60},"netstat":{"measurement":["tcp_established","tcp_time_wait"],"metrics_collection_interval":60},"swap":{"measurement":["swap_used_percent"],"metrics_collection_interval":60}}}}'




  ControlServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMZNLinux2Image
      IamInstanceProfile: !Ref CloudInstanceProfile
      InstanceType: t3.micro
      #KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            # Configure hosts file and pull the bruteforcer list
            SECURE1=`aws ssm get-parameter --name SecureServer1 --region ${AWS::Region} --output=text | awk '{print $7}'`
            SECURE2=`aws ssm get-parameter --name SecureServer2 --region ${AWS::Region} --output=text | awk '{print $7}'`
            echo ${!SECURE1} secureserver1 secureserver1 >> /etc/hosts
            echo ${!SECURE2} secureserver2 secureserver2 >> /etc/hosts
            easy_install pip
            pip install paramiko
            sudo yum -y install git
            cd /home/ec2-user/
            git clone https://github.com/R4stl1n/SSH-Brute-Forcer.git
            git clone https://github.com/jeanphorn/wordlist.git
            cp wordlist/usernames.txt SSH-Brute-Forcer/src/usernames.txt
            cp wordlist/passlist.txt SSH-Brute-Forcer/src/passwords.txt
            cd /home/ec2-user/SSH-Brute-Forcer/src
            echo secureserver1 > targets.txt
            echo secureserver2 > targets.txt
            chown -R ec2-user /home/ec2-user/
            yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum -y install httpress
            cd /home/ec2-user/
            cat <<EOF>> /usr/local/bin/webstress.sh
            #!/bin/bash
            x="0"
            while [ \$x -lt 11 ]
            do
            echo \$x
            httpress -n 10 -c 1  http://secureserver1/wordpress/index.php&
            httpress -n 10 -c 1  http://secureserver2/wordpress/index.php&
            sleep 15
            x=\$[\$x+1]
            done
            EOF
            cat <<EOF>> /usr/local/bin/webnormal.sh
            #!/bin/bash
            while true
            do
            httpress -n 2 -c 1  http://secureserver1/index.html&
            httpress -n 2 -c 1  http://secureserver2/index.html&
            sleep 15
            done
            EOF
            chmod +x /usr/local/bin/webnormal.sh
            chmod +x /usr/local/bin/webstress.sh
            echo "*/5 * * * * python /home/ec2-user/SSH-Brute-Forcer/src/SSHBruteForce.py -i secureserver1 -U /home/ec2-user/SSH-Brute-Forcer/src/usernames.txt -P /home/ec2-user/SSH-Brute-Forcer/src/passwords.txt -a 10000 -t 5" >> /var/spool/cron/ec2-user
            echo "*/5 * * * * python /home/ec2-user/SSH-Brute-Forcer/src/SSHBruteForce.py -i secureserver2 -U /home/ec2-user/SSH-Brute-Forcer/src/usernames.txt -P /home/ec2-user/SSH-Brute-Forcer/src/passwords.txt -a 10000 -t 5" >> /var/spool/cron/ec2-user
            echo "*/10 * * * * /usr/local/bin/webstress.sh">> /var/spool/cron/ec2-user
            echo "@reboot /usr/local/bin/webnormal.sh">> /var/spool/cron/ec2-user
            chown ec2-user:ec2-user /var/spool/cron/ec2-user
            reboot


            

      SecurityGroupIds:
        -
          !Ref AdminSG               # optional, list of String
      SubnetId: !Ref Subnet     # optional
      Tags:                # optional, list of Tag
        - Key: Name
          Value: ControlServer
    DependsOn:
      - SecureServer1
      - SecureServer2

  SecureServer1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMZNLinux2Image
      IamInstanceProfile: !Ref CloudInstanceProfile
      InstanceType: t3.micro
      #KeyName: !Ref KeyName
      UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              sudo hostname secureserver1
              echo secureserver1 > /etc/hostname
              rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CloudWatchAgentConfig} -s
              # Enable password authentication - OK since doing on a private subnet
              sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
              yum -y install httpd
              echo HELLO from `hostname` >> /var/www/html/index.html
              systemctl restart sshd
              systemctl start httpd
              systemctl enable httpd
              reboot
      SecurityGroupIds:
        -
          !Ref PrivateSecurityGroup              # optional, list of String
      SubnetId: !Ref Subnet     # optional
      Tags:                # optional, list of Tag
        - Key: Name
          Value: SecureServer1

  SecureServer2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !Ref AMZNLinux2Image
      IamInstanceProfile: !Ref CloudInstanceProfile
      InstanceType: t3.micro
      #KeyName: !Ref KeyName
      UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              sudo hostname secureserver2
              echo secureserver2 > /etc/hostname
              rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${CloudWatchAgentConfig} -s
              # Enable password authentication - OK since doing on a private subnet
              sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
              yum -y install httpd
              echo HELLO from `hostname`>> /var/www/html/index.html
              systemctl restart sshd
              systemctl start httpd
              systemctl enable httpd
              reboot
      SecurityGroupIds:
        -
          !Ref PrivateSecurityGroup               # optional, list of String
      SubnetId: !Ref Subnet     # optional
      Tags:                # optional, list of Tag
        - Key: Name
          Value: SecureServer2

  SecureServer1IP:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: 'IP Address for SecureServer1'
      Name: 'SecureServer1'
      Type: 'String'
      Value: !GetAtt SecureServer1.PrivateIp
    DependsOn: SecureServer1

  SecureServer2IP:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: 'IP Address for SecureServer1'
      Name: 'SecureServer2'
      Type: 'String'
      Value: !GetAtt SecureServer2.PrivateIp
    DependsOn: SecureServer2


# AWS Config resources

  ConfigRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: [config.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns: ['arn:aws:iam::aws:policy/service-role/AWSConfigRole']
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: s3:GetBucketAcl
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket']]
          - Effect: Allow
            Action: s3:PutObject
            Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ConfigBucket', /AWSLogs/,
                !Ref 'AWS::AccountId', /*]]
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Effect: Allow
            Action: config:Put*
            Resource: '*'

  ConfigBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Join:
        - '-'
        - ['config-example', !Ref "AWS::AccountId", !Ref "AWS::Region"]



  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref EmailAddress
        Protocol: email
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: ConfigTopicPolicy
        Version: '2012-10-17'
        Statement:
        - Sid: Sid1
          Effect: Allow
          # Principal: "*"
          Principal:
            Service: 
              - config.amazonaws.com #Allow Config
              - events.amazonaws.com #Allow CloudWatch
          Action: SNS:Publish
          Resource: !Ref 'ConfigTopic'
        - Sid: Sid2
          Effect: Allow
          Principal:
            AWS: '*' # Allow CloudWatch Alarms, ElastiCache Notifications, Elastic Beanstalk Notifications, Auto Scaling Notification
          Action: 'sns:Publish'
          Resource: !Ref ConfigTopic
          Condition:
            StringEquals:
              'AWS:SourceOwner': !Ref 'AWS::AccountId'
      Topics: 
        - !Ref 'ConfigTopic'



  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: SecurityRecorder
      RecordingGroup:
        ResourceTypes:
          - 'AWS::EC2::SecurityGroup'
          - 'AWS::EC2::Volume'
      RoleARN: !GetAtt [ConfigRole, Arn]

  DeliveryChannel:
    # Condition: CreateDeliveryChannel
    Type: AWS::Config::DeliveryChannel
    Properties:
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: Six_Hours
      S3BucketName: !Ref 'ConfigBucket'
      SnsTopicARN: !Ref 'ConfigTopic'

  AWSConfigRuleSSH:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: restricted-ssh
      Description: >-
        Checks whether security groups that are in use disallow unrestricted
        incoming SSH traffic.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::SecurityGroup'
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
    DependsOn: ConfigRecorder

  AWSConfigRuleEncrypted:
    Type: 'AWS::Config::ConfigRule'
    Properties:
      ConfigRuleName: encrypted-volumes
      Description: >-
        Checks whether EBS volumes that are in an attached state are encrypted.
      InputParameters: {}
      Scope:
        ComplianceResourceTypes:
          - 'AWS::EC2::Volume'
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES
    DependsOn: ConfigRecorder

            

Outputs: {}
